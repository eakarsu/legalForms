<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : 'Legal Forms Generator' %></title>
    <meta name="description" content="Generate professional legal documents quickly and accurately using AI-powered templates.">
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/css/custom.css" rel="stylesheet">
    <link href="/css/enhanced-features.css" rel="stylesheet">
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light bg-white sticky-top">
        <div class="container">
            <a class="navbar-brand d-flex align-items-center" href="/">
                <div class="brand-icon me-2">
                    <i class="fas fa-balance-scale"></i>
                </div>
                <span class="brand-text">LegalForms<span class="text-primary">AI</span></span>
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ms-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link active" href="/#form-types">Services</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/#features">Features</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/faq">FAQ</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <main class="container my-4">
        <div class="row">
    <div class="col-12">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item active"><%= formConfig.name %></li>
            </ol>
        </nav>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <h1><%= formConfig.name %></h1>
        <p class="lead"><%= formConfig.description %></p>
        <hr>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Document Information</h5>
            </div>
            <div class="card-body">
                <form id="documentForm">
                    <!-- Natural Language Input -->
                    <div class="mb-4">
                        <label for="naturalLanguageInput" class="form-label">Describe Your Legal Needs</label>
                        <div class="input-group">
                            <textarea class="form-control" id="naturalLanguageInput" rows="3" 
                                placeholder="Example: I need to form an LLC for my consulting business in California..."></textarea>
                            <button class="btn btn-outline-secondary" type="button" id="parseNLBtn">
                                <i class="fas fa-magic"></i> Parse
                            </button>
                        </div>
                        <small class="form-text text-muted">Describe what you need in plain English, and we'll help fill out the form.</small>
                    </div>

                    <!-- Template Recommendations -->
                    <div id="templateRecommendations" class="mb-4" style="display: none;">
                        <label class="form-label">Recommended Templates</label>
                        <div id="recommendationsList" class="list-group">
                            <!-- Recommendations will be loaded here -->
                        </div>
                    </div>

                    <!-- Form Type Selection -->
                    <div class="mb-4">
                        <label for="specificFormType" class="form-label">Select Specific Document Type *</label>
                        <select class="form-select" id="specificFormType" name="specificFormType" required>
                            <option value="">Choose a specific document type...</option>
                        </select>
                        <small class="form-text text-muted">Select the exact type of document you need to generate.</small>
                    </div>
                    
                    <!-- Document Format Selection -->
                    <div class="mb-4">
                        <label for="documentFormat" class="form-label">Select Document Format *</label>
                        <select class="form-select" id="documentFormat" name="documentFormat" required>
                            <option value="pdf">PDF Document (.pdf)</option>
                            <option value="docx">Microsoft Word (.docx)</option>
                            <option value="txt">Text Document (.txt)</option>
                        </select>
                        <small class="form-text text-muted">Choose the format for your generated document.</small>
                    </div>
                    
                    <div id="formFields">
                        <!-- Dynamic form fields will be loaded here -->
                    </div>

                    <!-- Compliance Issues Display -->
                    <div id="complianceIssues" class="mb-4" style="display: none;">
                        <div class="alert alert-warning">
                            <h6><i class="fas fa-exclamation-triangle"></i> Compliance Issues</h6>
                            <ul id="complianceIssuesList"></ul>
                        </div>
                    </div>
                    
                    <div class="row mt-4">
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-file-alt me-2"></i>
                                Generate Document
                            </button>
                            <button type="button" class="btn btn-secondary btn-lg ms-2" onclick="resetForm()">
                                <i class="fas fa-undo me-2"></i>
                                Reset Form
                            </button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">Form Instructions</h6>
            </div>
            <div class="card-body">
                <ul class="list-unstyled">
                    <li><i class="fas fa-check text-success me-2"></i>Fill out all required fields</li>
                    <li><i class="fas fa-check text-success me-2"></i>Provide accurate information</li>
                    <li><i class="fas fa-check text-success me-2"></i>Review generated document</li>
                    <li><i class="fas fa-check text-success me-2"></i>Consult with attorney if needed</li>
                </ul>
                
                <div class="alert alert-warning mt-3">
                    <small>
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        Always have legal documents reviewed by a qualified attorney before use.
                    </small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Loading Modal -->
<div class="modal fade" id="loadingModal" tabindex="-1" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center p-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h5>Generating Document...</h5>
                <p class="text-muted">Please wait while we create your legal document.</p>
            </div>
        </div>
    </div>
</div>

<!-- Results Modal -->
<div class="modal fade" id="resultsModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Generated Document</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info mb-3">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Document Preview:</strong> This is a text preview of your document. The downloaded file will be formatted according to your selected format.
                </div>
                
                <!-- Document Review Results -->
                <div id="reviewResults" class="mb-3" style="display: none;">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="mb-0"><i class="fas fa-search"></i> Automated Review</h6>
                        </div>
                        <div class="card-body">
                            <div id="reviewScore" class="mb-2"></div>
                            <div id="reviewIssues"></div>
                            <div id="reviewSuggestions"></div>
                        </div>
                    </div>
                </div>
                
                <div id="documentContent" class="generated-document"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <div class="btn-group">
                    <button type="button" class="btn btn-primary" id="downloadBtn">
                        <i class="fas fa-download me-2"></i>Download Document
                    </button>
                    <button type="button" class="btn btn-outline-primary" id="regenerateBtn">
                        <i class="fas fa-redo me-2"></i>Generate Different Format
                    </button>
                    <button type="button" class="btn btn-outline-success" id="esignBtn" style="display: none;">
                        <i class="fas fa-signature me-2"></i>Send for E-Signature
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

    </main>

    <!-- Footer -->
    <footer class="footer">
        <div class="container">
            <div class="row">
                <div class="col-lg-4 mb-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="brand-icon me-2 text-white">
                            <i class="fas fa-balance-scale"></i>
                        </div>
                        <span class="brand-text text-white">LegalForms<span class="text-primary">AI</span></span>
                    </div>
                    <p class="text-muted">Professional legal document generation powered by advanced AI technology.</p>
                </div>
                <div class="col-lg-8 mb-4">
                    <h6 class="text-white mb-3">Important Legal Disclaimer</h6>
                    <p class="text-muted small">
                        This tool generates legal document templates for informational purposes only. 
                        All generated documents should be reviewed by a qualified attorney before use. 
                        Laws vary by jurisdiction, and professional legal advice is recommended for all legal matters.
                    </p>
                </div>
            </div>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    
    <script>
    let currentFilename = null;
    let currentDocumentId = null;
    let socket = null;

    // Initialize Socket.io for real-time features
    function initializeSocket() {
        socket = io();
        
        socket.on('validation_result', function(data) {
            displayFieldValidation(data.field_name, data.issues, data.suggestions);
        });
        
        socket.on('validation_error', function(data) {
            console.error('Validation error for field:', data.field_name, data.error);
        });
    }

    // Load form types when page loads
    $(document).ready(function() {
        console.log('Document ready, jQuery version:', $.fn.jquery);
        console.log('Page loaded, loading form types...');
        
        // Initialize real-time features
        initializeSocket();
        
        // Test API connectivity first
        $.get('/api/test')
            .done(function(response) {
                console.log('API test successful:', response);
                loadSpecificFormTypes();
                loadTemplateRecommendations();
            })
            .fail(function(xhr, status, error) {
                console.error('API test failed:', error);
                $('#specificFormType').html('<option value="">API connection failed</option>');
            });
    });

    function loadSpecificFormTypes() {
        const formType = '<%= formType %>';
        console.log('Loading form types for:', formType);
        
        // Add error handling and timeout
        $.ajax({
            url: `/api/form-types/${formType}`,
            method: 'GET',
            timeout: 10000,
            dataType: 'json',
            success: function(types) {
                console.log('Received form types:', types);
                console.log('Types is array:', Array.isArray(types));
                console.log('Types length:', types ? types.length : 'undefined');
                renderSpecificFormTypes(types);
            },
            error: function(xhr, status, error) {
                console.error('Error loading form types:', error);
                console.error('Status:', status);
                console.error('Response:', xhr.responseText);
                $('#specificFormType').html('<option value="">Error loading form types</option>');
            }
        });
    }

    function renderSpecificFormTypes(types) {
        console.log('Rendering types:', types);
        let html = '<option value="">Choose a specific document type...</option>';
        
        if (types && Array.isArray(types) && types.length > 0) {
            types.forEach(function(type) {
                console.log('Adding type:', type);
                html += `<option value="${type.value}">${type.label}</option>`;
            });
        } else {
            console.log('No types available or invalid data:', types);
            html += '<option value="">No document types available</option>';
        }
        
        console.log('Setting dropdown HTML:', html);
        $('#specificFormType').html(html);
    }

    // Handle specific form type selection
    $(document).on('change', '#specificFormType', function() {
        const specificType = $(this).val();
        if (specificType) {
            loadFormFields(specificType);
        } else {
            $('#formFields').html('');
        }
    });

    function loadFormFields(specificType) {
        const formType = '<%= formType %>';
        
        $.get(`/api/form-fields/${formType}/${specificType}`)
            .done(function(fields) {
                renderFormFields(fields);
            })
            .fail(function() {
                $('#formFields').html('<div class="alert alert-danger">Error loading form fields</div>');
            });
    }

    function renderFormFields(fields) {
        let html = '';
        
        fields.forEach(function(field) {
            html += '<div class="mb-3">';
            html += `<label for="${field.name}" class="form-label">`;
            html += field.label;
            if (field.required) {
                html += ' <span class="text-danger">*</span>';
            }
            html += '</label>';
            
            if (field.type === 'select') {
                html += `<select class="form-select" id="${field.name}" name="${field.name}"`;
                if (field.required) html += ' required';
                html += '>';
                html += '<option value="">Select an option</option>';
                field.options.forEach(function(option) {
                    html += `<option value="${option}">${option}</option>`;
                });
                html += '</select>';
            } else if (field.type === 'textarea') {
                html += `<textarea class="form-control" id="${field.name}" name="${field.name}" rows="3"`;
                if (field.required) html += ' required';
                html += '></textarea>';
            } else {
                html += `<input type="${field.type}" class="form-control" id="${field.name}" name="${field.name}"`;
                if (field.required) html += ' required';
                html += '>';
            }
            
            html += '</div>';
        });
        
        $('#formFields').html(html);
    }

    function resetForm() {
        document.getElementById('documentForm').reset();
        $('#formFields').html('');
    }

    // Handle form submission
    $(document).on('submit', '#documentForm', function(e) {
        e.preventDefault();
        
        // Check if specific form type is selected
        const specificType = $('#specificFormType').val();
        if (!specificType) {
            alert('Please select a specific document type first.');
            return;
        }
        
        // Get selected format
        const format = $('#documentFormat').val() || 'pdf';
        
        // Collect form data
        const formData = {};
        $(this).find('input, select, textarea').each(function() {
            if (this.name) {
                formData[this.name] = this.value;
            }
        });
        
        // Add specific form type to form data
        formData.specific_form_type = specificType;
        
        // Show loading modal with format info
        $('#loadingModal .modal-body p').text(`Please wait while we create your ${format.toUpperCase()} legal document.`);
        $('#loadingModal').modal('show');
        
        // Submit to backend
        $.ajax({
            url: '/generate',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                form_type: '<%= formType %>',
                specific_type: specificType,
                form_data: formData,
                format: format
            }),
            success: function(response) {
                $('#loadingModal').modal('hide');
                
                if (response.success) {
                    $('#documentContent').text(response.document);
                    currentFilename = response.filename;
                    
                    // Update download button text based on format
                    const formatText = response.format.toUpperCase();
                    $('#downloadBtn').html(`<i class="fas fa-download me-2"></i>Download ${formatText} Document`);
                    
                    $('#resultsModal').modal('show');
                } else {
                    alert('Error generating document: ' + response.error);
                }
            },
            error: function(xhr) {
                $('#loadingModal').modal('hide');
                alert('Error generating document. Please try again.');
            }
        });
    });

    // Handle download
    $(document).on('click', '#downloadBtn', function() {
        if (currentFilename) {
            window.location.href = `/download/${currentFilename}`;
        }
    });
    
    // Handle regenerate with different format
    $(document).on('click', '#regenerateBtn', function() {
        $('#resultsModal').modal('hide');
        // Scroll back to format selection
        $('#documentFormat')[0].scrollIntoView({ behavior: 'smooth' });
        $('#documentFormat').focus();
    });

    // Natural Language Processing
    $(document).on('click', '#parseNLBtn', function() {
        const text = $('#naturalLanguageInput').val();
        if (!text.trim()) {
            alert('Please enter a description of your legal needs');
            return;
        }

        $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Parsing...');

        if (window.nlpProcessor) {
            window.nlpProcessor.parseInput(text)
                .then(result => {
                    window.nlpProcessor.applyParsedData(result);
                    // Load form types for detected intent
                    if (result.intent && result.intent !== '<%= formType %>') {
                        window.location.href = `/form/${result.intent}`;
                    }
                })
                .catch(error => {
                    alert('Error parsing input: ' + error.message);
                })
                .finally(() => {
                    $('#parseNLBtn').prop('disabled', false).html('<i class="fas fa-magic"></i> Parse');
                });
        }
    });

    // Load template recommendations
    function loadTemplateRecommendations() {
        $.get(`/api/templates/recommendations/<%= formType %>`)
            .done(function(response) {
                if (response.success && response.recommendations.length > 0) {
                    displayTemplateRecommendations(response.recommendations);
                }
            })
            .catch(function(error) {
                console.error('Failed to load recommendations:', error);
            });
    }

    // Display template recommendations
    function displayTemplateRecommendations(recommendations) {
        const container = $('#recommendationsList');
        const recommendationsDiv = $('#templateRecommendations');
        
        container.empty();
        
        recommendations.forEach(function(rec, index) {
            const item = $(`
                <div class="list-group-item recommendation-item" data-specific-type="${rec.specific_type}">
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="mb-1">${getSpecificTypeLabel(rec.specific_type)}</h6>
                            <p class="mb-1 recommendation-reason">${rec.reason}</p>
                        </div>
                        <span class="badge bg-primary recommendation-score">${Math.round(rec.score * 100)}%</span>
                    </div>
                </div>
            `);
            container.append(item);
        });
        
        recommendationsDiv.show();
        
        // Handle recommendation clicks
        $('.recommendation-item').on('click', function() {
            const specificType = $(this).data('specific-type');
            $('#specificFormType').val(specificType).trigger('change');
            $(this).addClass('active').siblings().removeClass('active');
        });
    }

    // Helper function to get specific type label
    function getSpecificTypeLabel(specificType) {
        // This would ideally come from the server, but for now we'll use a simple mapping
        const labels = {
            'llc_articles': 'LLC Articles of Organization',
            'corp_articles': 'Corporation Articles of Incorporation',
            'purchase_agreement': 'Real Estate Purchase Agreement',
            'lease_agreement': 'Residential Lease Agreement',
            'divorce_petition': 'Divorce Petition',
            'last_will': 'Last Will and Testament',
            'employment_agreement': 'Employment Agreement',
            'civil_complaint': 'Civil Complaint',
            'service_agreement': 'Service Agreement'
        };
        return labels[specificType] || specificType.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
    }

    // Setup compliance validation when form fields are loaded
    function setupComplianceValidation() {
        if (window.complianceValidator) {
            window.complianceValidator.setupFieldListeners('<%= formType %>');
        }
    }

    // Enhanced form submission with review results
    function handleGenerationSuccess(response) {
        $('#loadingModal').modal('hide');
        
        if (response.success) {
            $('#documentContent').text(response.document);
            currentFilename = response.filename;
            currentDocumentId = response.documentId;
            
            // Update download button text based on format
            const formatText = response.format.toUpperCase();
            $('#downloadBtn').html(`<i class="fas fa-download me-2"></i>Download ${formatText} Document`);
            
            // Show e-signature button if document was saved
            if (currentDocumentId) {
                $('#esignBtn').show();
            }
            
            // Display review results if available
            if (response.reviewResults) {
                displayReviewResults(response.reviewResults);
            }
            
            // Display compliance validation if available
            if (response.complianceValidation && response.complianceValidation.issues.length > 0) {
                displayComplianceResults(response.complianceValidation);
            }
            
            $('#resultsModal').modal('show');
        } else {
            alert('Error generating document: ' + response.error);
        }
    }

    // Display document review results
    function displayReviewResults(reviewResults) {
        const reviewDiv = $('#reviewResults');
        const scoreDiv = $('#reviewScore');
        const issuesDiv = $('#reviewIssues');
        const suggestionsDiv = $('#reviewSuggestions');
        
        // Display score
        const score = Math.round(reviewResults.score * 100);
        const scoreClass = score >= 80 ? 'excellent' : score >= 60 ? 'good' : 'poor';
        scoreDiv.html(`
            <div class="review-score">
                <span>Document Quality Score:</span>
                <div class="score-bar">
                    <div class="score-fill ${scoreClass}" style="width: ${score}%"></div>
                </div>
                <span>${score}%</span>
            </div>
        `);
        
        // Display issues
        if (reviewResults.issues && reviewResults.issues.length > 0) {
            const issuesHtml = reviewResults.issues.map(issue => `
                <div class="review-issue ${issue.severity}">
                    <strong>${issue.type.replace(/_/g, ' ').toUpperCase()}:</strong> ${issue.message}
                </div>
            `).join('');
            issuesDiv.html('<h6>Issues Found:</h6>' + issuesHtml);
        }
        
        // Display suggestions
        if (reviewResults.suggestions && reviewResults.suggestions.length > 0) {
            const suggestionsHtml = reviewResults.suggestions.map(suggestion => `
                <li>${suggestion}</li>
            `).join('');
            suggestionsDiv.html(`
                <div class="review-suggestions">
                    <h6><i class="fas fa-lightbulb"></i> Suggestions:</h6>
                    <ul>${suggestionsHtml}</ul>
                </div>
            `);
        }
        
        reviewDiv.show();
    }

    // Display compliance validation results
    function displayComplianceResults(complianceValidation) {
        // This would show compliance issues in the modal
        // Implementation depends on your specific UI requirements
        console.log('Compliance validation:', complianceValidation);
    }

    // E-signature functionality
    $(document).on('click', '#esignBtn', function() {
        if (!currentDocumentId) {
            alert('Document must be saved before sending for e-signature');
            return;
        }
        
        // Show e-signature modal (you'd need to create this modal)
        showEsignatureModal();
    });

    function showEsignatureModal() {
        // Create and show e-signature modal
        const modal = $(`
            <div class="modal fade" id="esignatureModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Send for E-Signature</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <form id="esignatureForm">
                                <div class="mb-3">
                                    <label class="form-label">Signers</label>
                                    <div id="signersContainer">
                                        <div class="signer-input">
                                            <input type="text" class="form-control mb-2" placeholder="Signer Name" name="signerName[]" required>
                                            <input type="email" class="form-control" placeholder="Signer Email" name="signerEmail[]" required>
                                        </div>
                                    </div>
                                    <button type="button" class="btn btn-sm btn-outline-primary" id="addSignerBtn">
                                        <i class="fas fa-plus"></i> Add Another Signer
                                    </button>
                                </div>
                            </form>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" id="sendEsignBtn">Send for Signature</button>
                        </div>
                    </div>
                </div>
            </div>
        `);
        
        $('body').append(modal);
        $('#esignatureModal').modal('show');
        
        // Handle adding signers
        $('#addSignerBtn').on('click', function() {
            const signerInput = $(`
                <div class="signer-input">
                    <input type="text" class="form-control mb-2" placeholder="Signer Name" name="signerName[]" required>
                    <input type="email" class="form-control" placeholder="Signer Email" name="signerEmail[]" required>
                    <button type="button" class="btn btn-sm btn-outline-danger remove-signer">Remove</button>
                </div>
            `);
            $('#signersContainer').append(signerInput);
        });
        
        // Handle removing signers
        $(document).on('click', '.remove-signer', function() {
            $(this).closest('.signer-input').remove();
        });
        
        // Handle sending for signature
        $('#sendEsignBtn').on('click', function() {
            const signers = [];
            $('#signersContainer .signer-input').each(function() {
                const name = $(this).find('input[name="signerName[]"]').val();
                const email = $(this).find('input[name="signerEmail[]"]').val();
                if (name && email) {
                    signers.push({ name, email });
                }
            });
            
            if (signers.length === 0) {
                alert('Please add at least one signer');
                return;
            }
            
            $(this).prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> Sending...');
            
            $.post('/api/esignature/send', {
                documentId: currentDocumentId,
                signers: signers
            })
            .done(function(response) {
                if (response.success) {
                    alert('Document sent for e-signature successfully!');
                    $('#esignatureModal').modal('hide');
                } else {
                    alert('Error: ' + response.error);
                }
            })
            .fail(function() {
                alert('Failed to send document for e-signature');
            })
            .always(function() {
                $('#sendEsignBtn').prop('disabled', false).html('Send for Signature');
            });
        });
        
        // Clean up modal when hidden
        $('#esignatureModal').on('hidden.bs.modal', function() {
            $(this).remove();
        });
    }

    // Override the original form submission to include new features
    $(document).off('submit', '#documentForm').on('submit', '#documentForm', function(e) {
        e.preventDefault();
        
        // Check if specific form type is selected
        const specificType = $('#specificFormType').val();
        if (!specificType) {
            alert('Please select a specific document type first.');
            return;
        }
        
        // Get selected format
        const format = $('#documentFormat').val() || 'pdf';
        
        // Collect form data
        const formData = {};
        $(this).find('input, select, textarea').each(function() {
            if (this.name) {
                formData[this.name] = this.value;
            }
        });
        
        // Add specific form type to form data
        formData.specific_form_type = specificType;
        
        // Show loading modal with format info
        $('#loadingModal .modal-body p').text(`Please wait while we create your ${format.toUpperCase()} legal document.`);
        $('#loadingModal').modal('show');
        
        // Submit to backend
        $.ajax({
            url: '/generate',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                form_type: '<%= formType %>',
                specific_type: specificType,
                form_data: formData,
                format: format
            }),
            success: handleGenerationSuccess,
            error: function(xhr) {
                $('#loadingModal').modal('hide');
                const response = xhr.responseJSON;
                if (response && response.complianceIssues) {
                    alert('Compliance issues found:\n' + response.complianceIssues.map(issue => issue.message).join('\n'));
                } else {
                    alert('Error generating document. Please try again.');
                }
            }
        });
    });

    // Setup compliance validation when form fields are loaded
    $(document).on('DOMSubtreeModified', '#formFields', function() {
        setupComplianceValidation();
    });
    </script>

    <!-- Include enhanced feature scripts -->
    <script src="/js/compliance.js"></script>
    <script src="/js/nlp.js"></script>
</body>
</html>
